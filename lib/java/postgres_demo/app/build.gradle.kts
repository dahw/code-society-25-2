/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    // Spring Boot plugin
    id("org.springframework.boot") version "3.2.1"
    id("io.spring.dependency-management") version "1.1.4"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Spring Boot Starter
    implementation("org.springframework.boot:spring-boot-starter")
    
    // Spring Boot JDBC
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    
    // Spring Boot JPA
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    
    // PostgreSQL JDBC Driver
    implementation("org.postgresql:postgresql")
    
    // Flyway Core (managed by Spring Boot)
    implementation("org.flywaydb:flyway-core")
    
    // Dotenv for loading .env files
    implementation("me.paulschwarz:spring-dotenv:4.0.0")
    
    // Testing
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    // H2 Database for testing
    testImplementation("com.h2database:h2")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.codesociety.PostgresDemoApplication"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named<org.springframework.boot.gradle.tasks.run.BootRun>("bootRun") {
    // Set working directory to project root so .env file can be found
    workingDir = project.rootDir
}
